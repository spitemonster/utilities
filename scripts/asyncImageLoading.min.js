let asyncImgs = document.getElementsByClassName('asyncImage')
let options = {rootMargin: '0px', threshold: 0.5}
let observer = new IntersectionObserver((entries, observer) => { entries.forEach((entry) => { if (entry.isIntersecting) { setSrcSet(entry.target) } }) }, options)
function setSrcSet (item) {
  let srcSet = item.dataset.srcset
  let imgSrc = srcSet.split(',')
  let sizes = {}
  let width = window.innerWidth
  let sizeIndex
  let ratio = 0
  let sizeKeys = []
  let downloadingImage = new Image()
  imgSrc.forEach((img) => {
    let size = img.trim().split(' ')[1].replace('w', '')
    let url = img.trim().split(' ')[0]
    sizeKeys.push(size)
    sizes[size.toString()] = url
  })
  sizeKeys.forEach((key) => {
    let k = Number(key)
    if (((k / width) > ratio && width > k) || k >= 2560) {
      ratio = k / width
      sizeIndex = key
    }
  })
  downloadingImage.onload = function () {
    item.setAttribute('srcset', srcSet)
    item.classList.remove('asyncImage')
    item.removeAttribute('data-srcset')
  }
  downloadingImage.src = sizes[sizeIndex]
}
for (let i = 0; i < asyncImgs.length; i++) { observer.observe(asyncImgs[i]) }
